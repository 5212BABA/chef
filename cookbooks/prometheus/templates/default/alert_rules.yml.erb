# DO NOT EDIT - This file is being maintained by Chef

groups:
  - name: alertmanager
    rules:
      - alert: prometheus target missing
        expr: up == 0
        for: 5m
        labels:
          alertgroup: "prometheus"
  - name: database
    rules:
      - alert: postgres replication delay
        expr: pg_replication_lag_seconds > 5
        for: 5m
        labels:
          alertgroup: database
        annotations:
          delay: "{{ $value | humanizeDuration }}"
  - name: hwmon
    rules:
      - alert: hwmon fan alarm
        expr: node_hwmon_fan_alarm == 1
        for: 5m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          fan_rpm: "{{ with printf \"node_hwmon_fan_rpm{instance='%s',chip='%s',sensor='%s'}\" $labels.instance $labels.chip $labels.sensor | query }}{{ . | first | value | humanize }}rpm{{end}}"
          fan_min_rpm: "{{ with printf \"node_hwmon_fan_min_rpm{instance='%s',chip='%s',sensor='%s'}\" $labels.instance $labels.chip $labels.sensor | query }}{{ . | first | value | humanize }}rpm{{end}}"
      - alert: hwmon temperature alarm
        expr: node_hwmon_temp_alarm == 1
        for: 5m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          temp_celsius: "{{ with printf \"node_hwmon_temp_celsius{instance='%s',chip='%s',sensor='%s'}\" $labels.instance $labels.chip $labels.sensor | query }}{{ . | first | value | humanize }}C{{end}}"
          temp_max_celsius: "{{ with printf \"node_hwmon_temp_max_celsius{instance='%s',chip='%s',sensor='%s'}\" $labels.instance $labels.chip $labels.sensor | query }}{{ . | first | value | humanize }}C{{end}}"
          temp_crit_celsius: "{{ with printf \"node_hwmon_temp_crit_celsius{instance='%s',chip='%s',sensor='%s'}\" $labels.instance $labels.chip $labels.sensor | query }}{{ . | first | value | humanize }}C{{end}}"
      - alert: hwmon voltage alarm
        expr: node_hwmon_in_alarm == 1
        for: 5m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          in_volts: "{{ with printf \"node_hwmon_in_volts{instance='%s',chip='%s',sensor='%s'}\" $labels.instance $labels.chip $labels.sensor | query }}{{ . | first | value | humanize }}V{{end}}"
          in_min_volts: "{{ with printf \"node_hwmon_in_min_volts{instance='%s',chip='%s',sensor='%s'}\" $labels.instance $labels.chip $labels.sensor | query }}{{ . | first | value | humanize }}V{{end}}"
          in_max_volts: "{{ with printf \"node_hwmon_in_max_volts{instance='%s',chip='%s',sensor='%s'}\" $labels.instance $labels.chip $labels.sensor | query }}{{ . | first | value | humanize }}V{{end}}"
  - name: ipmi
    rules:
      - alert: ipmi fan alarm
        expr: ipmi_fan_speed_state > 0
        for: 5m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          fan_speed_rpm: "{{ with printf \"ipmi_fan_speed_rpm{instance='%s',id='%s'}\" $labels.instance $labels.id | query }}{{ . | first | value | humanize }}rpm{{end}}"
      - alert: ipmi temperature alarm
        expr: ipmi_temperature_state > 0
        for: 5m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          temperature_celsius: "{{ with printf \"ipmi_temperature_celsius{instance='%s',id='%s'}\" $labels.instance $labels.id | query }}{{ . | first | value | humanize }}C{{end}}"
      - alert: ipmi voltage alarm
        expr: ipmi_voltage_state > 0
        for: 5m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          voltage_volts: "{{ with printf \"ipmi_voltage_volts{instance='%s',id='%s'}\" $labels.instance $labels.id | query }}{{ . | first | value | humanize }}V{{end}}"
  - name: mdadm
    rules:
      - alert: mdadm array inactive
        expr: node_md_state{state="inactive"} > 0
        for: 0m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          required: "{{ with printf \"node_md_disks_required{instance='%s',device='%s'}\" $labels.instance $labels.device | query }}{{ . | first | value | humanize }} disks{{end}}"
          active: "{{ with printf \"node_md_disks{instance='%s',device='%s',state='active'}\" $labels.instance $labels.device | query }}{{ . | first | value | humanize }} disks{{end}}"
          failed: "{{ with printf \"node_md_disks{instance='%s',device='%s',state='failed'}\" $labels.instance $labels.device | query }}{{ . | first | value | humanize }} disks{{end}}"
          spare: "{{ with printf \"node_md_disks{instance='%s',device='%s',state='spare'}\" $labels.instance $labels.device | query }}{{ . | first | value | humanize }} disks{{end}}"
      - alert: mdadm disk failed
        expr: node_md_disks{state="failed"} > 0
        for: 0m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          required: "{{ with printf \"node_md_disks_required{instance='%s',device='%s'}\" $labels.instance $labels.device | query }}{{ . | first | value | humanize }} disks{{end}}"
          active: "{{ with printf \"node_md_disks{instance='%s',device='%s',state='active'}\" $labels.instance $labels.device | query }}{{ . | first | value | humanize }} disks{{end}}"
          failed: "{{ with printf \"node_md_disks{instance='%s',device='%s',state='failed'}\" $labels.instance $labels.device | query }}{{ . | first | value | humanize }} disks{{end}}"
          spare: "{{ with printf \"node_md_disks{instance='%s',device='%s',state='spare'}\" $labels.instance $labels.device | query }}{{ . | first | value | humanize }} disks{{end}}"
  - name: memory
    rules:
      - alert: low memory
        expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes < 0.1
        for: 5m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          memory_free: "{{ $value | humanizePercentage }}"
      - alert: memory pressure
        expr: rate(node_vmstat_pgmajfault[1m]) > 1000
        for: 5m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          major_page_faults: "{{ $value }} faults/s"
      - alert: oom kill detected
        expr: increase(node_vmstat_oom_kill[1m]) > 0
        for: 0m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          new_oom_kills: "{{ $value }}"
  - name: tile
    rules:
      - alert: renderd replication delay
        expr: renderd_replication_delay > 120
        for: 5m
        labels:
          alertgroup: tile
        annotations:
          delay: "{{ $value | humanizeDuration }}"
      - alert: missed tile rate
        expr: sum(rate(modtile_http_response_total{code="404"}[5m])) by (instance) / sum(rate(modtile_http_response_total[5m])) by (instance) > 0.05
        for: 5m
        labels:
          alertgroup: tile
        annotations:
          miss_rate: "{{ $value | humanizePercentage }}"
  - name: time
    rules:
      - alert: clock not synchronising
        expr: min_over_time(node_timex_sync_status[1m]) == 0 and node_timex_maxerror_seconds >= 16
        for: 5m
        labels:
          alertgroup: "{{ $labels.instance }}"
      - alert: clock skew detected
        expr: (node_timex_offset_seconds > 0.05 and deriv(node_timex_offset_seconds[5m]) >= 0) or (node_timex_offset_seconds < -0.05 and deriv(node_timex_offset_seconds[5m]) <= 0)
        for: 5m
        labels:
          alertgroup: "{{ $labels.instance }}"
        annotations:
          skew: "{{ with printf \"node_timex_offset_seconds{instance='%s'}\" $labels.instance | query }} {{ . | humanizeDuration }}{{ end }}"
